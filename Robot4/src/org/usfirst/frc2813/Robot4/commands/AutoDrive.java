// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot4.commands;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2813.Robot4.Robot;
import org.usfirst.frc2813.Robot4.RobotMap;

/**
 *
 */
public class AutoDrive extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_forwardSpeed;
	private double m_strafeSpeed;
	private double m_distance;
	private Encoder myEncoder1;
	private Encoder myEncoder2;
	private Encoder myEncoder3;
	//private double abs_forwardSpeed;
	//private double abs_strafeSpeed;
	private double throttleMax;
	private double throttleMin;
	private double maxSpeed;
	private double minDist;
	private double d;
	//private double maxDist;
	private double lerpStart;
	private double lerpStop;
	private double lerpEnd;
	private double accelStartDistance;
	private double accelStopDistance;
	private double accelStartValue;
	private double accelStopValue;
	//private double m_stoppingDistance[];
	//private float v0;
	//private float v1;
	//private float t;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutoDrive(double forwardSpeed, double strafeSpeed, double distance, Encoder whichEncoder1, Encoder whichEncoder2, Encoder whichEncoder3) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		System.out.println(forwardSpeed);
		System.out.println(strafeSpeed);
		//abs_forwardSpeed = Math.abs(forwardSpeed);
		//abs_strafeSpeed = Math.abs(strafeSpeed);
		m_forwardSpeed = forwardSpeed;
		m_strafeSpeed = strafeSpeed;
		maxSpeed = Math.abs(strafeSpeed);
		m_distance = distance;
		myEncoder1 = whichEncoder1;
		myEncoder2 = whichEncoder2;
		myEncoder3 = whichEncoder3;
		throttleMax = 1;
		if (m_forwardSpeed<0) {
			throttleMin = -0.2;
		}
		else {
			throttleMin = 0.2;
		}
		minDist=0.01;//very small number to come to complete stop at
		lerpStart = m_distance/2;//Distance from target to start slowing down.
		lerpStop = 2;//Distance from target beyond which use minimum speed.
		lerpEnd = 0.2;//Minimum speed to use
		accelStartDistance=0;
		accelStopDistance=m_distance/3;
		accelStartValue=0.2;
		accelStopValue =Math.abs(strafeSpeed);
//		m_stoppingDistance = new double[(int) 0.5];
//		m_stoppingDistance = new double[(int) 2];
//		m_stoppingDistance = new double[(int) 7.5];
//		m_stoppingDistance = new double[(int) 13];
//		m_stoppingDistance = new double[(int) 19];
		

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		myEncoder1.reset();
		myEncoder2.reset();
		myEncoder3.reset();
		d=m_distance;
	}
	private double distanceTraveled() {
		return (Math.abs(myEncoder1.getDistance()*RobotMap.WHEEL_CIRCUMFERENCE)+Math.abs(myEncoder2.getDistance()*RobotMap.WHEEL_CIRCUMFERENCE))/2;
	}
	private double calcThrottleSteadyState() {
		return maxSpeed;
	}
	private double calcThrottleDecelerate(double d) {//set throttle given distance from target
		if (d<minDist) {
			return 0;
		}
		if (d<=lerpStop) {
			return lerpEnd;
		}
		if (d>=lerpStart) {
			//if (distanceTraveled()<accelStopDistance) {
				//return distanceTraveled()*((accelStopValue-accelStartValue)/(accelStopDistance-accelStartDistance))+accelStartValue;
			//}
			return maxSpeed;
		}
		
		
	
		return (d-lerpStop) * (maxSpeed - lerpEnd)/(lerpStart-lerpStop) + lerpEnd;
		
		/*
		double percentDist = (d - lerpStop)/(lerpStart-lerpStop);
		System.out.println("Exiting calcThrottle");
		//System.out.println(maxSpeed - percentDist * (maxSpeed-lerpEnd));0
		System.out.println(percentDist);
		if (percentDist < lerpEnd) {
			return lerpEnd;
		}
		return percentDist;
		//return maxSpeed - percentDist * (maxSpeed-lerpEnd);
		 *
		 */
	}
	private double calcThrottleAccelerate(double d) {
		if (distanceTraveled() < accelStopDistance) {
			return distanceTraveled()*((accelStopValue-accelStartValue)/(accelStopDistance-accelStartDistance))+accelStartValue;
		}
		return maxSpeed;
	}
	/*private double lerp(double d) {//d distance
		  if (d==0) {
			  return 0;
		  }
		  if (d<)
		  return throttleMin + d *(throttleMax-throttleMin);
		}
	*/
	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		System.out.println("execute");
		d=m_distance-distanceTraveled();
		System.out.println(d);
		double potentialThrottle=Math.min(calcThrottleSteadyState(), calcThrottleAccelerate(d));
		double newThrottle=Math.min(potentialThrottle, calcThrottleDecelerate(d));
		//double newThrottle = calcThrottle(d);
		System.out.println(newThrottle);
		if (newThrottle != Math.abs(m_strafeSpeed)) {
			m_strafeSpeed=-1*newThrottle;
			/*if (m_strafeSpeed < 0) {
				m_strafeSpeed=-1*newThrottle;
				System.out.println(m_strafeSpeed);
			}else {
				m_strafeSpeed = newThrottle;
				System.out.println(m_strafeSpeed);
			}*/
		}
		Robot.driveTrain.mecanumDrive(m_forwardSpeed, m_strafeSpeed, 0.0, true);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		//final double WHEEL_DIAMETER = 6;
		//final double WHEEL_CIRCUMFERENCE = Math.PI * WHEEL_DIAMETER;
		//final int ENCODER_TICKS_PER_REVOLUTION = 360;
		//final double ENCODER_TICKS_PER_INCH = ENCODER_TICKS_PER_REVOLUTION / WHEEL_CIRCUMFERENCE; // ticks/revolution = ticks/inch * inches/revolution
		//final double ENCODER_TICKS_PER_FOOT = ENCODER_TICKS_PER_INCH * 12.0;
		//System.out.println("Distance 1: "+myEncoder1.getDistance()+", Distance 2: "+myEncoder2.getDistance()+", Distance: "+m_distance+", Get 1: "+ myEncoder1.get()+", GetRaw 1: " + myEncoder1.getRaw()+", Get 2: "+myEncoder2.get()+", GetRaw 2: "+myEncoder2.getRaw());
		//final double AA = Math.abs(myEncoder1.getDistance());
		//double AA *= 
		
		return distanceTraveled()>=m_distance;
	}

	// Called once after isFinished returns true
	protected void end() {
		System.out.println(
    			myEncoder1.get() + " [" + myEncoder1.getRaw() + "] " +myEncoder1.getDistance()+" "+ myEncoder1.getDistance()*RobotMap.WHEEL_CIRCUMFERENCE +" ["+myEncoder1.getDistancePerPulse()+"] "+myEncoder1.getDirection()+" ["+myEncoder1.getStopped()+"]\n" +
    			myEncoder2.get() + " [" + myEncoder2.getRaw() + "]" +myEncoder2.getDistance()+" "+ myEncoder2.getDistance()*RobotMap.WHEEL_CIRCUMFERENCE+" ["+myEncoder2.getDistancePerPulse()+"] "+myEncoder1.getDirection()+" ["+myEncoder1.getStopped()+"]\n" +
    			myEncoder3.get() + " [" + myEncoder3.getRaw() + "] " +myEncoder3.getDistance()+" "+ myEncoder3.getDistance()*RobotMap.WHEEL_CIRCUMFERENCE +" ["+myEncoder3.getDistancePerPulse()+"] "+myEncoder3.getDirection()+" ["+myEncoder3.getStopped()+"]\n"
    			);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
