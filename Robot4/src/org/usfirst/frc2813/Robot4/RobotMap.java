// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.Robot4;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SendableBase;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public static Encoder driveTrainQuadratureEncoder1;
    public static Encoder driveTrainQuadratureEncoder2;
    public static Encoder driveTrainQuadratureEncoder3;
    public static Encoder driveTrainQuadratureEncoder4;
    public static SpeedController driveTrainSpeedController1;
    public static SpeedController driveTrainSpeedController2;
    public static SpeedController driveTrainSpeedController3;
    public static SpeedController driveTrainSpeedController4;
    @SuppressWarnings("deprecation")
	public static RobotDrive driveTrainRobotDrive41;
    public static SpeedController climberMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private static final double WHEEL_DIAMETER = 6;
	public static final double WHEEL_CIRCUMFERENCE = 19.25;
	private static final int ENCODER_TICKS_PER_REVOLUTION = 360;
	private static final double ENCODER_TICKS_PER_INCH = ENCODER_TICKS_PER_REVOLUTION / WHEEL_CIRCUMFERENCE; // ticks/revolution = ticks/inch * inches/revolution
	private static final double ENCODER_TICKS_PER_FOOT = ENCODER_TICKS_PER_INCH * 12.0;
	

    @SuppressWarnings("deprecation")
	public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //driveTrainQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 1", driveTrainQuadratureEncoder1);
        //driveTrainQuadratureEncoder1.setDistancePerPulse(1/ENCODER_TICKS_PER_INCH);
        //driveTrainQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        
        driveTrainQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 2", driveTrainQuadratureEncoder2);
        driveTrainQuadratureEncoder2.setName("DriveTrain", "Quadrature Encoder 2");
//        driveTrainQuadratureEncoder2.setDistancePerPulse(1/ENCODER_TICKS_PER_INCH);
//        driveTrainQuadratureEncoder2.setDistancePerPulse(1.0/360.0);
        driveTrainQuadratureEncoder2.setDistancePerPulse(0.00277777777777);
        driveTrainQuadratureEncoder2.setSamplesToAverage(1);
        driveTrainQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadratureEncoder2.setReverseDirection(false);
        
        driveTrainQuadratureEncoder3 = new Encoder(4, 5, true, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 3", driveTrainQuadratureEncoder3);
        //driveTrainQuadratureEncoder3.setDistancePerPulse(1/ENCODER_TICKS_PER_INCH);
        driveTrainQuadratureEncoder3.setName("DriveTrain", "Quadrature Encoder 3");
        driveTrainQuadratureEncoder3.setDistancePerPulse(0.00277777777777);
        driveTrainQuadratureEncoder3.setSamplesToAverage(1);
        driveTrainQuadratureEncoder3.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadratureEncoder3.setReverseDirection(true);
        //driveTrainQuadrdriveTrainQuadratureEncoder4.setDistancePerPulse(0.00277777777777);atureEncoder3.setPIDSourceType(PIDSourceType.kRate);
        
        driveTrainQuadratureEncoder4 = new Encoder(0, 1, true, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 4", driveTrainQuadratureEncoder4);
        //void edu.wpi.first.wpilibj.livewindow.LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 4", Sendable component)
        driveTrainQuadratureEncoder4.setName("DriveTrain", "Quadrature Encoder 4");
//        driveTrainQuadratureEncoder4.setDistancePerPulse(1/ENCODER_TICKS_PER_INCH);
//      driveTrainQuadratureEncoder4.setDistancePerPulse(1.0/360.0);
        driveTrainQuadratureEncoder4.setDistancePerPulse(0.00277777777777);
//        driveTrainQuadratureEncoder4.setDistancePerPulse(.05305164769);
        driveTrainQuadratureEncoder4.setSamplesToAverage(1);
        driveTrainQuadratureEncoder4.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadratureEncoder4.setReverseDirection(true);
        
        driveTrainSpeedController1 = new Spark(0);
       // LiveWindow.addActuator("DriveTrain", "Speed Controller 1", (Spark) driveTrainSpeedController1);
        ((SendableBase) driveTrainSpeedController1).setName("DriveTrain","Speed Controller 1");
        
        driveTrainSpeedController2 = new Spark(1);
        //LiveWindow.addActuator("DriveTrain", "Speed Controller 2", (Spark) driveTrainSpeedController2);
        ((SendableBase) driveTrainSpeedController2).setName("DriveTrain","Speed Controller 2");
        
        driveTrainSpeedController3 = new Spark(2);
        LiveWindow.addActuator("DriveTrain", "Speed Controller 3", (Spark) driveTrainSpeedController3);
        ((SendableBase) driveTrainSpeedController3).setName("DriveTrain","Speed Controller 3");
        
        driveTrainSpeedController4 = new Spark(3);

        LiveWindow.addActuator("DriveTrain", "Speed Controller 4", (Spark) driveTrainSpeedController4);
        //((Actua) driveTrainSpeedController4).setName("DriveTrain","Speed Controller 4");
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainSpeedController1, driveTrainSpeedController2,
              driveTrainSpeedController3, driveTrainSpeedController4);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        climberMotor = new Talon(8);
        //LiveWindow.addActuator("Climber", "Motor", (Talon) climberMotor);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
