// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.TennisBallLauncher3.subsystems;

import org.usfirst.frc2813.TennisBallLauncher3.RobotMap;
import org.usfirst.frc2813.TennisBallLauncher3.commands.OIDrive;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final DifferentialDrive robotDrive = RobotMap.driveTrainRobotDrive;
	private final SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
	private final SpeedController speedController2 = RobotMap.driveTrainSpeedController2;
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	
	public DriveTrain() {
		addChild(robotDrive);
		addChild((Sendable) speedController1);
		addChild((Sendable) speedController2);
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		setDefaultCommand(new OIDrive());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void arcadeDrive(Joystick joystick1) {
		double z = joystick1.getX()+joystick1.getTwist();
		// jack wants the other side of the robot to be the front, so invert the forwards/backwards axis.
		double x = -joystick1.getY();
		// square X and cube Z.
		robotDrive.arcadeDrive((x > 0 ? x*x : -x*x), z*z*z, false);
	}
}
